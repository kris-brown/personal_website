;; ____________________________________________________________________________
;; Aquamacs custom-file warning:
;; Warning: After loading this .emacs file, Aquamacs will also load
;; customizations from `custom-file' (customizations.el). Any settings there
;; will override those made here.
;; Consider moving your startup settings to the Preferences.el file, which
;; is loaded after `custom-file':
;; ~/Library/Preferences/Aquamacs Emacs/Preferences
;; _____________________________________________________________________________
(package-initialize)

(setq org-preview-latex-default-process 'imagemagik)
(setq org-latex-create-formula-image-program 'imagemagick)

;;;;Org mode configuration
(require 'org)

;; From AUCTeX: 1.3 quick start
(setq TeX-auto-save t)
(setq TeX-parse-self t)

;; Make it so that slashes don't show up in /italics/
(setq org-hide-emphasis-markers t)

; Don't automatically create newlines in lists when they get too long
(defun turn-on-visual-line-mode () (visual-line-mode 1))
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
(remove-hook 'text-mode-hook 'auto-detect-wrap)
(require 'org-indent)
(org-indent-mode -1)
(auto-fill-mode -1)


;; Size of LaTeX
(setq org-format-latex-options (plist-put org-format-latex-options :scale 1.5))


;; Shortcuts for copypaste
(add-to-list 'org-structure-template-alist
             '("q" "?    - Question\n      - \n    - Solution\n      - "))


;; allow remembering risky variables
(advice-add 'risky-local-variable-p :override #'ignore)

;; Automatically preview after typing "$ "
;(defun krofna-hack ()
;  (when (looking-back (rx "$ "))
;    (save-excursion
;      (backward-char 1)
;      (org-preview-latex-fragment))))

;; Display tikz figures
(add-to-list 'org-latex-packages-alist
             '("" "tikz" t))

(add-to-list 'org-latex-packages-alist
             '("" "tikz-cd" t))
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t))

;; Automatic preview toggling
;(defvar kk/org-latex-fragment-last nil
;  "Holds last fragment/environment you were on.")

;(defun kk/org-in-latex-fragment-p ()
;  "Return the point where the latex fragment begins, if inside
;a latex fragment. Else return false"
;  (let* ((el (org-element-context))
;         (el-type (car el)))
;    (and (or (eq 'latex-fragment el-type) (eq 'latex-environment el-type))
;         (org-element-property :begin el))))

 ;(defun kk/org-latex-fragment-toggle ()
 ; "Toggle a latex fragment image"
 ; (and (eq 'org-mode major-mode)
 ;      (let ((begin (kk/org-in-latex-fragment-p)))
 ;        (cond
 ;         ;; were on a fragment and now on a new fragment
 ;         ((and
 ;           ;; fragment we were on
 ;           kk/org-latex-fragment-last
 ;           ;; and are on a fragment now
 ;           begin

 ;           ;; but not on the last one this is a little tricky. as you edit the
 ;           ;; fragment, it is not equal to the last one. We use the begin
 ;           ;; property which is less likely to change for the comparison.
 ;           (not (and kk/org-latex-fragment-last
 ;                     (= begin
 ;                        kk/org-latex-fragment-last))))
 ;          ;; go back to last one and put image back, provided there is still a fragment there
 ;          (save-excursion
 ;            (goto-char kk/org-latex-fragment-last)
 ;            (when (kk/org-in-latex-fragment-p) (org-preview-latex-fragment))
 ;
 ;            ;; now remove current image
 ;            (goto-char begin)
 ;            (let ((ov (loop for ov in (org--list-latex-overlays)
 ;                            if
 ;                            (and
 ;                             (<= (overlay-start ov) (point))
 ;                             (>= (overlay-end ov) (point)))
 ;                            return ov)))
 ;              (when ov
 ;                (delete-overlay ov)))
 ;            ;; and save new fragment
 ;            (setq kk/org-latex-fragment-last begin)))
 ;
 ;         ;; were on a fragment and now are not on a fragment
 ;         ((and
 ;           ;; not on a fragment now
 ;           (not begin)
 ;           ;; but we were on one
 ;           kk/org-latex-fragment-last)
 ;          ;; put image back on, provided that there is still a fragment here.
 ;          (save-excursion
 ;            (goto-char kk/org-latex-fragment-last)
 ;            (when (kk/org-in-latex-fragment-p) (org-preview-latex-fragment)))
 ;
 ;          ;; unset last fragment
 ;           (setq kk/org-latex-fragment-last nil))
 ;
 ;         ;; were not on a fragment, and now are
 ;         ((and
 ;           ;; we were not one one
 ;           (not kk/org-latex-fragment-last)
 ;           ;; but now we are
 ;           begin)
 ;          ;; remove image
 ;          (save-excursion
 ;            (goto-char begin)
 ;            (let ((ov (loop for ov in (org--list-latex-overlays)
 ;                            if
 ;                            (and
 ;                             (<= (overlay-start ov) (point))
 ;                             (>= (overlay-end ov) (point)))
 ;                            return ov)))
 ;              (when ov
 ;                (delete-overlay ov))))
 ;          (setq kk/org-latex-fragment-last begin))))))

;(defun org--list-latex-overlays (&optional beg end)
;  "List all Org LaTeX overlays in current buffer. Limit to overlays between BEG and END when those are provided."
;  (org-remove-if-not
;   (lambda (o) (eq (overlay-get o 'org-overlay-type) 'org-latex-overlay))
;   (overlays-in (or beg (point-min)) (or end (point-max)))))

;(provide 'latex-fragments)

;;; latex-fragments.el ends here
; TO USE THE ABOVE, ADD THIS TO FILE?
;# Local variables:
;# post-self-insert-hook: krofna-hack
;# post-command-hook: kk/org-latex-fragment-toggle
;# end:
